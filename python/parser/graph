// Abstract Syntax Tree
digraph {
	0 [label="publicclassListNode{privateObjectmyData;privateListNodemyNext;publicListNode(){this(null,null);}publicListNode(Objectdata,ListNodenext){myData=data;myNext=next;}publicObjectgetData(){returnmyData;}publicListNodegetNext(){returnmyNext;}publicvoidsetData(Objectdata){myData=data;}publicvoidsetNext(ListNodenext){myNext=next;}}<EOF>
compilationUnit"]
	1 [label="publicclassListNode{privateObjectmyData;privateListNodemyNext;publicListNode(){this(null,null);}publicListNode(Objectdata,ListNodenext){myData=data;myNext=next;}publicObjectgetData(){returnmyData;}publicListNodegetNext(){returnmyNext;}publicvoidsetData(Objectdata){myData=data;}publicvoidsetNext(ListNodenext){myNext=next;}}
normalClassDeclaration"]
	2 [label="public
classModifier"]
	1 -> 2
	3 [label="ListNode
Identifier"]
	1 -> 3
	4 [label="{privateObjectmyData;privateListNodemyNext;publicListNode(){this(null,null);}publicListNode(Objectdata,ListNodenext){myData=data;myNext=next;}publicObjectgetData(){returnmyData;}publicListNodegetNext(){returnmyNext;}publicvoidsetData(Objectdata){myData=data;}publicvoidsetNext(ListNodenext){myNext=next;}}
classBody"]
	5 [label="privateObjectmyData;
fieldDeclaration"]
	6 [label="private
fieldModifier"]
	5 -> 6
	7 [label="Object
Identifier"]
	5 -> 7
	8 [label="myData
Identifier"]
	5 -> 8
	4 -> 5
	9 [label="privateListNodemyNext;
fieldDeclaration"]
	10 [label="private
fieldModifier"]
	9 -> 10
	11 [label="ListNode
Identifier"]
	9 -> 11
	12 [label="myNext
Identifier"]
	9 -> 12
	4 -> 9
	13 [label="publicListNode(){this(null,null);}
constructorDeclaration"]
	14 [label="public
constructorModifier"]
	13 -> 14
	15 [label="ListNode()
constructorDeclarator"]
	16 [label="ListNode
Identifier"]
	15 -> 16
	13 -> 15
	17 [label="{this(null,null);}
constructorBody"]
	18 [label="this(null,null);
explicitConstructorInvocation"]
	19 [label="null,null
argumentList"]
	20 [label="null
literal"]
	19 -> 20
	21 [label="null
literal"]
	19 -> 21
	18 -> 19
	17 -> 18
	13 -> 17
	4 -> 13
	22 [label="publicListNode(Objectdata,ListNodenext){myData=data;myNext=next;}
constructorDeclaration"]
	23 [label="public
constructorModifier"]
	22 -> 23
	24 [label="ListNode(Objectdata,ListNodenext)
constructorDeclarator"]
	25 [label="ListNode
Identifier"]
	24 -> 25
	26 [label="Objectdata,ListNodenext
formalParameterList"]
	27 [label="Objectdata
formalParameter"]
	28 [label="Object
Identifier"]
	27 -> 28
	29 [label="data
Identifier"]
	27 -> 29
	26 -> 27
	30 [label="ListNodenext
formalParameter"]
	31 [label="ListNode
Identifier"]
	30 -> 31
	32 [label="next
Identifier"]
	30 -> 32
	26 -> 30
	24 -> 26
	22 -> 24
	33 [label="{myData=data;myNext=next;}
constructorBody"]
	34 [label="myData=data;myNext=next;
blockStatements"]
	35 [label="myData=data;
expressionStatement"]
	36 [label="myData=data
assignment"]
	37 [label="myData
Identifier"]
	36 -> 37
	38 [label="=
assignmentOperator"]
	36 -> 38
	39 [label="data
Identifier"]
	36 -> 39
	35 -> 36
	34 -> 35
	40 [label="myNext=next;
expressionStatement"]
	41 [label="myNext=next
assignment"]
	42 [label="myNext
Identifier"]
	41 -> 42
	43 [label="=
assignmentOperator"]
	41 -> 43
	44 [label="next
Identifier"]
	41 -> 44
	40 -> 41
	34 -> 40
	33 -> 34
	22 -> 33
	4 -> 22
	45 [label="publicObjectgetData(){returnmyData;}
methodDeclaration"]
	46 [label="public
methodModifier"]
	45 -> 46
	47 [label="ObjectgetData()
methodHeader"]
	48 [label="Object
Identifier"]
	47 -> 48
	49 [label="getData()
methodDeclarator"]
	50 [label="getData
Identifier"]
	49 -> 50
	47 -> 49
	45 -> 47
	51 [label="{returnmyData;}
block"]
	52 [label="returnmyData;
returnStatement"]
	53 [label="myData
Identifier"]
	52 -> 53
	51 -> 52
	45 -> 51
	4 -> 45
	54 [label="publicListNodegetNext(){returnmyNext;}
methodDeclaration"]
	55 [label="public
methodModifier"]
	54 -> 55
	56 [label="ListNodegetNext()
methodHeader"]
	57 [label="ListNode
Identifier"]
	56 -> 57
	58 [label="getNext()
methodDeclarator"]
	59 [label="getNext
Identifier"]
	58 -> 59
	56 -> 58
	54 -> 56
	60 [label="{returnmyNext;}
block"]
	61 [label="returnmyNext;
returnStatement"]
	62 [label="myNext
Identifier"]
	61 -> 62
	60 -> 61
	54 -> 60
	4 -> 54
	63 [label="publicvoidsetData(Objectdata){myData=data;}
methodDeclaration"]
	64 [label="public
methodModifier"]
	63 -> 64
	65 [label="voidsetData(Objectdata)
methodHeader"]
	66 [label="void
result"]
	65 -> 66
	67 [label="setData(Objectdata)
methodDeclarator"]
	68 [label="setData
Identifier"]
	67 -> 68
	69 [label="Objectdata
formalParameter"]
	70 [label="Object
Identifier"]
	69 -> 70
	71 [label="data
Identifier"]
	69 -> 71
	67 -> 69
	65 -> 67
	63 -> 65
	72 [label="{myData=data;}
block"]
	73 [label="myData=data;
expressionStatement"]
	74 [label="myData=data
assignment"]
	75 [label="myData
Identifier"]
	74 -> 75
	76 [label="=
assignmentOperator"]
	74 -> 76
	77 [label="data
Identifier"]
	74 -> 77
	73 -> 74
	72 -> 73
	63 -> 72
	4 -> 63
	78 [label="publicvoidsetNext(ListNodenext){myNext=next;}
methodDeclaration"]
	79 [label="public
methodModifier"]
	78 -> 79
	80 [label="voidsetNext(ListNodenext)
methodHeader"]
	81 [label="void
result"]
	80 -> 81
	82 [label="setNext(ListNodenext)
methodDeclarator"]
	83 [label="setNext
Identifier"]
	82 -> 83
	84 [label="ListNodenext
formalParameter"]
	85 [label="ListNode
Identifier"]
	84 -> 85
	86 [label="next
Identifier"]
	84 -> 86
	82 -> 84
	80 -> 82
	78 -> 80
	87 [label="{myNext=next;}
block"]
	88 [label="myNext=next;
expressionStatement"]
	89 [label="myNext=next
assignment"]
	90 [label="myNext
Identifier"]
	89 -> 90
	91 [label="=
assignmentOperator"]
	89 -> 91
	92 [label="next
Identifier"]
	89 -> 92
	88 -> 89
	87 -> 88
	78 -> 87
	4 -> 78
	1 -> 4
	0 -> 1
}
