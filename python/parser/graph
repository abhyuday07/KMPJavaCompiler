// Abstract Syntax Tree
digraph {
	0 [label="importjava.io.*;importjava.util.*;publicclassMyFileReader{publicstaticvoidmain(String[]args)throwsjava.io.IOException{Strings1;Strings2;BufferedReaderbr=newBufferedReader(newFileReader(\"MyFileReader.txt\"));s1=br.readLine();System.out.println(\"The line is \"+s1);System.out.println(\"The line has \"+s1.length()+\" characters\");System.out.println();System.out.println(\"Breaking the line into tokens we get:\");intnumTokens=0;StringTokenizerst=newStringTokenizer(s1);while(st.hasMoreTokens()){s2=st.nextToken();numTokens++;System.out.println(\"    Token \"+numTokens+\" is: \"+s2);}}}<EOF>
compilationUnit"]
	1 [label="importjava.io.*;
typeImportOnDemandDeclaration"]
	2 [label="java.io
name"]
	3 [label="java
Identifier"]
	2 -> 3
	4 [label="io
Identifier"]
	2 -> 4
	1 -> 2
	0 -> 1
	5 [label="importjava.util.*;
typeImportOnDemandDeclaration"]
	6 [label="java.util
name"]
	7 [label="java
Identifier"]
	6 -> 7
	8 [label="util
Identifier"]
	6 -> 8
	5 -> 6
	0 -> 5
	9 [label="publicclassMyFileReader{publicstaticvoidmain(String[]args)throwsjava.io.IOException{Strings1;Strings2;BufferedReaderbr=newBufferedReader(newFileReader(\"MyFileReader.txt\"));s1=br.readLine();System.out.println(\"The line is \"+s1);System.out.println(\"The line has \"+s1.length()+\" characters\");System.out.println();System.out.println(\"Breaking the line into tokens we get:\");intnumTokens=0;StringTokenizerst=newStringTokenizer(s1);while(st.hasMoreTokens()){s2=st.nextToken();numTokens++;System.out.println(\"    Token \"+numTokens+\" is: \"+s2);}}}
normalclassDeclaration"]
	10 [label="public
modifier"]
	9 -> 10
	11 [label="MyFileReader
Identifier"]
	9 -> 11
	12 [label="{publicstaticvoidmain(String[]args)throwsjava.io.IOException{Strings1;Strings2;BufferedReaderbr=newBufferedReader(newFileReader(\"MyFileReader.txt\"));s1=br.readLine();System.out.println(\"The line is \"+s1);System.out.println(\"The line has \"+s1.length()+\" characters\");System.out.println();System.out.println(\"Breaking the line into tokens we get:\");intnumTokens=0;StringTokenizerst=newStringTokenizer(s1);while(st.hasMoreTokens()){s2=st.nextToken();numTokens++;System.out.println(\"    Token \"+numTokens+\" is: \"+s2);}}}
classBody"]
	13 [label="publicstaticvoidmain(String[]args)throwsjava.io.IOException{Strings1;Strings2;BufferedReaderbr=newBufferedReader(newFileReader(\"MyFileReader.txt\"));s1=br.readLine();System.out.println(\"The line is \"+s1);System.out.println(\"The line has \"+s1.length()+\" characters\");System.out.println();System.out.println(\"Breaking the line into tokens we get:\");intnumTokens=0;StringTokenizerst=newStringTokenizer(s1);while(st.hasMoreTokens()){s2=st.nextToken();numTokens++;System.out.println(\"    Token \"+numTokens+\" is: \"+s2);}}
methodDeclaration"]
	14 [label="public
modifier"]
	13 -> 14
	15 [label="static
modifier"]
	13 -> 15
	16 [label="voidmain(String[]args)throwsjava.io.IOException
methodHeader"]
	17 [label="void
result"]
	16 -> 17
	18 [label="main(String[]args)
methodDeclarator"]
	19 [label="main
Identifier"]
	18 -> 19
	20 [label="String[]args
formalParameter"]
	21 [label="String[]
unannArraytype"]
	22 [label="String
Identifier"]
	21 -> 22
	23 [label="[]
dims"]
	21 -> 23
	20 -> 21
	24 [label="args
Identifier"]
	20 -> 24
	18 -> 20
	16 -> 18
	25 [label="throwsjava.io.IOException
throws_"]
	26 [label="java.io.IOException
classtype"]
	27 [label="java.io
classOrInterfaceType"]
	28 [label="java
Identifier"]
	27 -> 28
	29 [label=".io
classType__1__classOrInterfaceType"]
	30 [label="io
Identifier"]
	29 -> 30
	27 -> 29
	26 -> 27
	31 [label="IOException
Identifier"]
	26 -> 31
	25 -> 26
	16 -> 25
	13 -> 16
	32 [label="{Strings1;Strings2;BufferedReaderbr=newBufferedReader(newFileReader(\"MyFileReader.txt\"));s1=br.readLine();System.out.println(\"The line is \"+s1);System.out.println(\"The line has \"+s1.length()+\" characters\");System.out.println();System.out.println(\"Breaking the line into tokens we get:\");intnumTokens=0;StringTokenizerst=newStringTokenizer(s1);while(st.hasMoreTokens()){s2=st.nextToken();numTokens++;System.out.println(\"    Token \"+numTokens+\" is: \"+s2);}}
block"]
	33 [label="Strings1;Strings2;BufferedReaderbr=newBufferedReader(newFileReader(\"MyFileReader.txt\"));s1=br.readLine();System.out.println(\"The line is \"+s1);System.out.println(\"The line has \"+s1.length()+\" characters\");System.out.println();System.out.println(\"Breaking the line into tokens we get:\");intnumTokens=0;StringTokenizerst=newStringTokenizer(s1);while(st.hasMoreTokens()){s2=st.nextToken();numTokens++;System.out.println(\"    Token \"+numTokens+\" is: \"+s2);}
blockStatements"]
	34 [label="Strings1;
localVariableDeclarationStatement"]
	35 [label="Strings1
localVariableDeclaration"]
	36 [label="String
Identifier"]
	35 -> 36
	37 [label="s1
Identifier"]
	35 -> 37
	34 -> 35
	33 -> 34
	38 [label="Strings2;
localVariableDeclarationStatement"]
	39 [label="Strings2
localVariableDeclaration"]
	40 [label="String
Identifier"]
	39 -> 40
	41 [label="s2
Identifier"]
	39 -> 41
	38 -> 39
	33 -> 38
	42 [label="BufferedReaderbr=newBufferedReader(newFileReader(\"MyFileReader.txt\"));
localVariableDeclarationStatement"]
	43 [label="BufferedReaderbr=newBufferedReader(newFileReader(\"MyFileReader.txt\"))
localVariableDeclaration"]
	44 [label="BufferedReader
Identifier"]
	43 -> 44
	45 [label="br=newBufferedReader(newFileReader(\"MyFileReader.txt\"))
variableDeclarator"]
	46 [label="br
Identifier"]
	45 -> 46
	47 [label="newBufferedReader(newFileReader(\"MyFileReader.txt\"))
classInstanceCreationExpression__2__primary"]
	48 [label="BufferedReader
Identifier"]
	47 -> 48
	49 [label="newFileReader(\"MyFileReader.txt\")
classInstanceCreationExpression__2__primary"]
	50 [label="FileReader
Identifier"]
	49 -> 50
	51 [label="\"MyFileReader.txt\"
literal"]
	49 -> 51
	47 -> 49
	45 -> 47
	43 -> 45
	42 -> 43
	33 -> 42
	52 [label="s1=br.readLine();
expressionStatement"]
	53 [label="s1=br.readLine()
assignment"]
	54 [label="s1
Identifier"]
	53 -> 54
	55 [label="=
assignmentOperator"]
	53 -> 55
	56 [label="br.readLine()
methodInvocation__2__primary"]
	57 [label="br
Identifier"]
	56 -> 57
	58 [label="readLine
Identifier"]
	56 -> 58
	53 -> 56
	52 -> 53
	33 -> 52
	59 [label="System.out.println(\"The line is \"+s1);
expressionStatement"]
	60 [label="System.out.println(\"The line is \"+s1)
methodInvocation"]
	61 [label="System.out
name"]
	62 [label="System
Identifier"]
	61 -> 62
	63 [label="out
Identifier"]
	61 -> 63
	60 -> 61
	64 [label="println
Identifier"]
	60 -> 64
	65 [label="\"The line is \"+s1
additiveExpression"]
	66 [label="\"The line is \"
literal"]
	65 -> 66
	67 [label="s1
Identifier"]
	65 -> 67
	60 -> 65
	59 -> 60
	33 -> 59
	68 [label="System.out.println(\"The line has \"+s1.length()+\" characters\");
expressionStatement"]
	69 [label="System.out.println(\"The line has \"+s1.length()+\" characters\")
methodInvocation"]
	70 [label="System.out
name"]
	71 [label="System
Identifier"]
	70 -> 71
	72 [label="out
Identifier"]
	70 -> 72
	69 -> 70
	73 [label="println
Identifier"]
	69 -> 73
	74 [label="\"The line has \"+s1.length()+\" characters\"
additiveExpression"]
	75 [label="\"The line has \"+s1.length()
additiveExpression"]
	76 [label="\"The line has \"
literal"]
	75 -> 76
	77 [label="s1.length()
methodInvocation__2__primary"]
	78 [label="s1
Identifier"]
	77 -> 78
	79 [label="length
Identifier"]
	77 -> 79
	75 -> 77
	74 -> 75
	80 [label="\" characters\"
literal"]
	74 -> 80
	69 -> 74
	68 -> 69
	33 -> 68
	81 [label="System.out.println();
expressionStatement"]
	82 [label="System.out.println()
methodInvocation"]
	83 [label="System.out
name"]
	84 [label="System
Identifier"]
	83 -> 84
	85 [label="out
Identifier"]
	83 -> 85
	82 -> 83
	86 [label="println
Identifier"]
	82 -> 86
	81 -> 82
	33 -> 81
	87 [label="System.out.println(\"Breaking the line into tokens we get:\");
expressionStatement"]
	88 [label="System.out.println(\"Breaking the line into tokens we get:\")
methodInvocation"]
	89 [label="System.out
name"]
	90 [label="System
Identifier"]
	89 -> 90
	91 [label="out
Identifier"]
	89 -> 91
	88 -> 89
	92 [label="println
Identifier"]
	88 -> 92
	93 [label="\"Breaking the line into tokens we get:\"
literal"]
	88 -> 93
	87 -> 88
	33 -> 87
	94 [label="intnumTokens=0;
localVariableDeclarationStatement"]
	95 [label="intnumTokens=0
localVariableDeclaration"]
	96 [label="int
integraltype"]
	95 -> 96
	97 [label="numTokens=0
variableDeclarator"]
	98 [label="numTokens
Identifier"]
	97 -> 98
	99 [label="0
literal"]
	97 -> 99
	95 -> 97
	94 -> 95
	33 -> 94
	100 [label="StringTokenizerst=newStringTokenizer(s1);
localVariableDeclarationStatement"]
	101 [label="StringTokenizerst=newStringTokenizer(s1)
localVariableDeclaration"]
	102 [label="StringTokenizer
Identifier"]
	101 -> 102
	103 [label="st=newStringTokenizer(s1)
variableDeclarator"]
	104 [label="st
Identifier"]
	103 -> 104
	105 [label="newStringTokenizer(s1)
classInstanceCreationExpression__2__primary"]
	106 [label="StringTokenizer
Identifier"]
	105 -> 106
	107 [label="s1
Identifier"]
	105 -> 107
	103 -> 105
	101 -> 103
	100 -> 101
	33 -> 100
	108 [label="while(st.hasMoreTokens()){s2=st.nextToken();numTokens++;System.out.println(\"    Token \"+numTokens+\" is: \"+s2);}
whileStatement"]
	109 [label="st.hasMoreTokens()
methodInvocation__2__primary"]
	110 [label="st
Identifier"]
	109 -> 110
	111 [label="hasMoreTokens
Identifier"]
	109 -> 111
	108 -> 109
	112 [label="{s2=st.nextToken();numTokens++;System.out.println(\"    Token \"+numTokens+\" is: \"+s2);}
block"]
	113 [label="s2=st.nextToken();numTokens++;System.out.println(\"    Token \"+numTokens+\" is: \"+s2);
blockStatements"]
	114 [label="s2=st.nextToken();
expressionStatement"]
	115 [label="s2=st.nextToken()
assignment"]
	116 [label="s2
Identifier"]
	115 -> 116
	117 [label="=
assignmentOperator"]
	115 -> 117
	118 [label="st.nextToken()
methodInvocation__2__primary"]
	119 [label="st
Identifier"]
	118 -> 119
	120 [label="nextToken
Identifier"]
	118 -> 120
	115 -> 118
	114 -> 115
	113 -> 114
	121 [label="numTokens++;
expressionStatement"]
	122 [label="numTokens++
postIncrementExpression"]
	123 [label="numTokens
Identifier"]
	122 -> 123
	121 -> 122
	113 -> 121
	124 [label="System.out.println(\"    Token \"+numTokens+\" is: \"+s2);
expressionStatement"]
	125 [label="System.out.println(\"    Token \"+numTokens+\" is: \"+s2)
methodInvocation"]
	126 [label="System.out
name"]
	127 [label="System
Identifier"]
	126 -> 127
	128 [label="out
Identifier"]
	126 -> 128
	125 -> 126
	129 [label="println
Identifier"]
	125 -> 129
	130 [label="\"    Token \"+numTokens+\" is: \"+s2
additiveExpression"]
	131 [label="\"    Token \"+numTokens+\" is: \"
additiveExpression"]
	132 [label="\"    Token \"+numTokens
additiveExpression"]
	133 [label="\"    Token \"
literal"]
	132 -> 133
	134 [label="numTokens
Identifier"]
	132 -> 134
	131 -> 132
	135 [label="\" is: \"
literal"]
	131 -> 135
	130 -> 131
	136 [label="s2
Identifier"]
	130 -> 136
	125 -> 130
	124 -> 125
	113 -> 124
	112 -> 113
	108 -> 112
	33 -> 108
	32 -> 33
	13 -> 32
	12 -> 13
	9 -> 12
	0 -> 9
}
